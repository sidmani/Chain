{% macro createSetter variable %}
    @discardableResult func {{ variable.name }}(_ newValue: {{ variable.typeName }}) -> Self {
        {{ variable.name }} = newValue
        return self
    }
{% endmacro %}

{% macro newlineIfNotLast isLast %}
{% if not isLast %}

{% endif %}
{% endmacro %}

{% for type in types.implementing.ChainWrappedType|class %}
// sourcery:file:{{ type.name }}+Chain.swift
extension {{ type.name }} {
    {% for method in type.allMethods|instance where method.returnTypeName.isVoid and not method.isInitializer %}
    @discardableResult func {{ method.name }} -> Self {
        {{ method.callName }}({% for parameter in method.parameters %}{% if not parameter.argumentLabel == nil %}{{ parameter.argumentLabel }}: {{ parameter.name }}{% else %}{{ parameter.name }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %}) as Void
        return self
    }
    {% call newlineIfNotLast forloop.last %}
    {% endfor %}
    {% for variable in type.allVariables|instance|openSet where variable.isMutable %}
    {% call createSetter variable %}
    {% call newlineIfNotLast forloop.last %}
    {% endfor %}
    {% for variable in type.allVariables|instance|publicSet where variable.isMutable %}
    {% call createSetter variable %}
    {% call newlineIfNotLast forloop.last %}
    {% endfor %}
    {% for variable in type.allVariables|instance|internalSet where variable.isMutable %}
    {% call createSetter variable %}
    {% call newlineIfNotLast forloop.last %}
    {% endfor %}
}

// sourcery:end
{% endfor %}
